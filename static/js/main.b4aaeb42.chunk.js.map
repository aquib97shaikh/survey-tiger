{"version":3,"sources":["store/surveySlice.js","store/store.js","logo.png","MultiSelect.js","SingleSelect.js","CreateSurvey.js","TakeSurvey.js","ConfirmSurvey.js","App.js","index.js"],"names":["surveySlice","createSlice","name","initialState","surveys","surveyId","questions","isPublished","nextSurveyId","reducers","addQuestion","state","action","payload","type","question","options","Survey","find","s","Number","console","log","questionObj","questionId","length","push","markPublished","store","configureStore","reducer","MultiSelect","props","useState","setOptions","setQuestion","optionChange","event","id","target","tempOptions","value","className","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","onChange","e","map","i","idx","placeholder","onClick","splice","addOption","disabled","deleteOption","undefined","Button","updateQuestion","trim","filter","publish","SingleSelect","CreateSurvey","dispatch","useDispatch","useParams","history","useHistory","isOpen","setIsOpen","dropDownText","setDropDownText","questionType","qts","actions","ButtonDropdown","toggle","DropdownToggle","caret","size","DropdownMenu","DropdownItem","TakeSurvey","useSelector","ConfirmSurvey","survey","opt","App","latestSurveyId","to","src","logo","alt","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4aaeb42.chunk.js","sourcesContent":["\r\nimport {createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const surveySlice = createSlice({\r\n  name: \"Survey\",\r\n  initialState: {\r\n    surveys: [{ surveyId: 1, questions: [], isPublished: false }],\r\n    nextSurveyId: 1,\r\n  },\r\n  reducers: {\r\n    addQuestion: (state, action) => {\r\n      const { surveyId, type, question, options } = action.payload;\r\n      const Survey = state.surveys.find((s) => s.surveyId === Number(surveyId));\r\n      console.log(Survey);\r\n      const questionObj = {\r\n        type,\r\n        question,\r\n        options,\r\n        questionId: Survey.questions.length + 1,\r\n      };\r\n      Survey.questions.push(questionObj);\r\n    },\r\n    markPublished: (state, action) => {\r\n      const { surveyId } = action.payload;\r\n      let survey = state.surveys.find((s) => s.surveyId === Number(surveyId));\r\n      survey.isPublished = true;\r\n      state.nextSurveyId = state.surveys.length;\r\n      state.surveys.push({\r\n        surveyId: state.nextSurveyId,\r\n        questions: [],\r\n        isPublished: false,\r\n      });\r\n    },\r\n  },\r\n});","import {surveySlice} from \"./surveySlice\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport const store = configureStore({\r\n  reducer: surveySlice.reducer,\r\n});","export default __webpack_public_path__ + \"static/media/logo.5b12e92f.png\";","import { Button } from \"reactstrap\";\r\nimport React, { useState } from \"react\";\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from \"reactstrap\";\r\nfunction MultiSelect(props) {\r\n  const [options, setOptions] = useState(props.question ? props.question.options : [\"\"]);\r\n  const [question,setQuestion] = useState(props.question ? props.question.question : \"\");\r\n  const addOption = (idx) => {\r\n    if (options.length < 4) {\r\n      const tempOptions = [...options];\r\n      tempOptions.splice(idx + 1, 0, \"\");\r\n      setOptions(tempOptions);\r\n    }\r\n  };\r\n  const optionChange = (event) => {\r\n    const id = Number(event.target.name);\r\n    const tempOptions = [...options];\r\n    tempOptions[id] = event.target.value;\r\n    setOptions(tempOptions);\r\n  };\r\n  const deleteOption = (idx) => {\r\n    if (options.length > 1) {\r\n      const tempOptions = [...options];\r\n      tempOptions.splice(idx, 1);\r\n      setOptions(tempOptions);\r\n    }\r\n  };\r\n  const addQuestion = (e)=>{\r\n      if(question.trim() !==\"\" && options.filter(i=>i.trim().length ===0).length===0){\r\n          props.addQuestion({\r\n              question,options,type:\"Multi\",questionId:props.questionId\r\n          })\r\n      }\r\n  }\r\n  const updateQuestion = (e)=>{\r\n      props.updateQuestion({\r\n        question,options,type:\"Multi\",questionId:props.questionId\r\n    })\r\n  }\r\n  const publish = (e)=>{\r\n    if(question.trim() !==\"\" && options.filter(i=>i.trim().length ===0).length===0){\r\n      props.addQuestion({\r\n          question,options,type:\"Multi\",questionId:props.questionId\r\n      });\r\n      props.publish();\r\n  }\r\n  }\r\n  return (\r\n    <div className=\"multi-select\" >\r\n      <InputGroup>\r\n        <InputGroupAddon addonType=\"prepend\">\r\n          <InputGroupText>?</InputGroupText>\r\n        </InputGroupAddon>\r\n        <Input value={question} onChange={(e) => setQuestion(e.target.value)} />\r\n      </InputGroup>\r\n      <div className=\"options\">\r\n        {options.map((i, idx) => {\r\n          return (\r\n            <div className=\"option-container\" key={idx}>\r\n              <InputGroup>\r\n                <Input\r\n                  name={idx}\r\n                  value={i}\r\n                  onChange={optionChange}\r\n                  placeholder=\"type your answer here\"\r\n                />\r\n                <InputGroupAddon\r\n                  onClick={() => {\r\n                    addOption(idx);\r\n                  }}\r\n                  addonType=\"append\"\r\n                  disabled={options.length === 4}\r\n                >\r\n                  <InputGroupText>+</InputGroupText>\r\n                </InputGroupAddon>\r\n                <InputGroupAddon\r\n                  onClick={() => {\r\n                    deleteOption(idx);\r\n                  }}\r\n                  addonType=\"append\"\r\n                >\r\n                  <InputGroupText>-</InputGroupText>\r\n                </InputGroupAddon>\r\n              </InputGroup>\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        {options.length >= 4 ? (\r\n          props.question !== undefined ? (\r\n            <div className=\"qts-btn-container\">\r\n              <Button className=\"add-qts\" onClick={updateQuestion}>\r\n                Update Question\r\n              </Button>\r\n           \r\n            </div>\r\n          ) : (\r\n            <div className=\"qts-btn-container\">\r\n              <Button className=\"add-qts\" onClick={addQuestion}>\r\n                Add Question\r\n              </Button>\r\n              <Button className=\"add-qts\" onClick={publish}>Publish</Button>\r\n            </div>\r\n          )\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiSelect;\r\n","import { Button } from \"reactstrap\";\r\nimport React, { useState } from \"react\";\r\nimport { InputGroup, InputGroupText, InputGroupAddon, Input } from \"reactstrap\";\r\nfunction SingleSelect(props) {\r\n  const [options, setOptions] = useState(props.question ? props.question.options : [\"\",\"\"]);\r\n  const [question,setQuestion] = useState(props.question ? props.question.question : \"\");\r\n  \r\n  const optionChange = (event) => {\r\n    const id = Number(event.target.name);\r\n    const tempOptions = [...options];\r\n    tempOptions[id] = event.target.value;\r\n    setOptions(tempOptions);\r\n  };\r\n  const deleteOption = (idx) => {\r\n    \r\n      const tempOptions = [...options];\r\n\r\n      tempOptions[idx] = \"\";\r\n      setOptions(tempOptions);\r\n    \r\n  };\r\n  const addQuestion = (e)=>{\r\n      if(question.trim() !==\"\" && options.filter(i=>i.trim().length ===0).length===0){\r\n          props.addQuestion({\r\n              question,options,type:\"Single\",questionId:props.questionId\r\n          })\r\n      }\r\n  }\r\n  const updateQuestion = (e)=>{\r\n      props.updateQuestion({\r\n        question,options,type:\"Single\",questionId:props.questionId\r\n    })\r\n  }\r\n  const publish = (e)=>{\r\n    if(question.trim() !==\"\" && options.filter(i=>i.trim().length ===0).length===0){\r\n      props.addQuestion({\r\n          question,options,type:\"Single\",questionId:props.questionId\r\n      });\r\n      props.publish();\r\n  }\r\n  }\r\n  return (\r\n    <div className=\"single-select\">\r\n      <InputGroup>\r\n        <InputGroupAddon addonType=\"prepend\">\r\n          <InputGroupText>?</InputGroupText>\r\n        </InputGroupAddon>\r\n        <Input value={question} onChange={(e) => setQuestion(e.target.value)} />\r\n      </InputGroup>\r\n      <div className=\"options\">\r\n        {options.map((i, idx) => {\r\n          return (\r\n            <div className=\"option-container\" key={idx}>\r\n              <InputGroup>\r\n                <Input\r\n                  name={idx}\r\n                  value={i}\r\n                  onChange={optionChange}\r\n                  placeholder=\"type your answer here\"\r\n                />\r\n                <InputGroupAddon\r\n                  addonType=\"append\"\r\n                  disabled={options.length === 2}\r\n                >\r\n                  <InputGroupText>+</InputGroupText>\r\n                </InputGroupAddon>\r\n                <InputGroupAddon\r\n                  onClick={() => {\r\n                    deleteOption(idx);\r\n                  }}\r\n                  addonType=\"append\"\r\n                >\r\n                  <InputGroupText>-</InputGroupText>\r\n                </InputGroupAddon>\r\n              </InputGroup>\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        {options.length === 2 ? (\r\n          props.question !== undefined ? (\r\n            <div className=\"qts-btn-container\">\r\n              <Button className=\"add-qts\" onClick={updateQuestion}>\r\n                Update Question\r\n              </Button>\r\n           \r\n            </div>\r\n          ) : (\r\n            <div className=\"qts-btn-container\">\r\n              <Button className=\"add-qts\" onClick={addQuestion}>\r\n                Add Question\r\n              </Button>\r\n              <Button className=\"add-qts\" onClick={publish}>Publish</Button>\r\n            </div>\r\n          )\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default SingleSelect\r\n","import React, { useState } from 'react'\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { ButtonDropdown, DropdownItem, DropdownMenu, DropdownToggle } from 'reactstrap';\r\nimport \"./CreateSurvey.css\";\r\nimport MultiSelect from './MultiSelect';\r\nimport {useDispatch} from \"react-redux\";\r\nimport SingleSelect from './SingleSelect';\r\nimport { surveySlice } from './store/surveySlice';\r\nfunction CreateSurvey(props) {\r\n   const dispatch = useDispatch();\r\n  const {surveyId} = useParams();\r\n  const history = useHistory();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [dropDownText, setDropDownText] = useState(\"Select Question Type\");\r\n  const [questionType, setQuestionType] = useState([\r\n    \"Multi-Select Question\",\r\n    \"Single-Select Question\",\r\n  ]);\r\n  const [questions, setQuestion] = useState([]);\r\n  const addQuestion = (qts)=>{\r\n    console.log({qts});\r\n      setQuestion([...questions,qts]);\r\n      setDropDownText(\"Select Question Type\");\r\n      dispatch(surveySlice.actions.addQuestion({surveyId,...qts}));\r\n  }\r\n  const updateQuestion =(qts)=>{\r\n      setQuestion(questions.map(q=>q.questionId===qts.questionId ? qts : q))\r\n  };\r\n  const publish =()=>{\r\n    dispatch(surveySlice.actions.markPublished({surveyId}));\r\n    history.push(`/confirm/${surveyId}`);\r\n  }\r\n  const toggle = () => setIsOpen(!isOpen);\r\n  return (\r\n    <div className=\"create-survey\">\r\n      {/* {questions.map((question) => {\r\n        return question.type === \"Multi\" ? (\r\n          <MultiSelect questionId={question.questionId} question={question} updateQuestion={updateQuestion} />\r\n        ) : (\r\n          <SingleSelect questionId={questions.question} question={question} updateQuestion={updateQuestion} />\r\n        );\r\n      })} */}\r\n      <ButtonDropdown isOpen={isOpen} toggle={toggle}>\r\n        <DropdownToggle caret size=\"lg\">\r\n          {dropDownText}\r\n        </DropdownToggle>\r\n        <DropdownMenu>\r\n          {questionType.map((i) => (\r\n            <DropdownItem\r\n              className=\"cs-dropdownitem btn-lg\"\r\n              onClick={() => {\r\n                setDropDownText(i);\r\n              }}\r\n              key={i}\r\n            >\r\n              {i}\r\n            </DropdownItem>\r\n          ))}\r\n        </DropdownMenu>\r\n      </ButtonDropdown>\r\n      {dropDownText === questionType[0] ? (\r\n        <MultiSelect questionId={questions.length} addQuestion={addQuestion} publish={publish}/>\r\n      ) : null}\r\n      {dropDownText === questionType[1] ? (\r\n        <SingleSelect questionId={questions.length} addQuestion={addQuestion} publish={publish}/>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CreateSurvey\r\n","import React,{useState,useEffect} from 'react'\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\n\r\nfunction TakeSurvey() {\r\n    \r\n     const surveys = useSelector(state => (state.surveys.filter(s=>s.questions.length>0)));\r\n  \r\n    return (\r\n      <div className=\"take-survey\">\r\n        TakeSurvey\r\n        {surveys.map((i) => {\r\n          return (\r\n            <div className=\"ts-iem\" key={i.surveyId}>\r\n              Survey {i.surveyId}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default TakeSurvey\r\n","import React from 'react'\r\nimport {useDispatch,useSelector} from \"react-redux\";\r\nimport {useHistory,useParams}  from \"react-router-dom\";\r\nimport { Button } from 'reactstrap';\r\nfunction ConfirmSurvey(props) {\r\n    const dispatch = useDispatch();\r\n    const {surveyId} = useParams(); \r\n    const survey = useSelector(state=>state.surveys.filter(i=>i.surveyId === Number(surveyId)))[0];\r\n    console.log(survey);\r\n    return (\r\n        <div className=\"confirm-survey\">\r\n            {survey && survey.questions.map(qts=>{\r\n                return (\r\n                  <div className=\"qts\" key={qts.questionId}>\r\n                    <h3>{qts.question}</h3>\r\n                    {qts.type === \"Multi\" ? (\r\n                      <div className=\"options\">\r\n                        {qts.options.map((opt, idx) => {\r\n                          return (\r\n                            <div key={opt + idx}>\r\n                              <input type=\"checkbox\" /> <label>{opt}</label>\r\n                            </div>\r\n                          );\r\n                        })}\r\n                      </div>\r\n                    ) : (\r\n                      qts.options.map((opt,idx) => {\r\n                        return (\r\n                          <div key={opt+idx}>\r\n                            <input type=\"radio\" /> <label>{opt}</label>\r\n                          </div>\r\n                        );\r\n                      })\r\n                    )}\r\n                  </div>\r\n                );})}\r\n                 <div className=\"qts-btn-container\">\r\n              <Button className=\"confirm-qts\" >\r\n                Update Question\r\n              </Button>\r\n           \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmSurvey;\r\n","import \"./App.css\";\nimport { Button } from \"reactstrap\";\nimport logo from \"./logo.png\";\nimport {useSelector} from \"react-redux\";\nimport CreateSurvey from \"./CreateSurvey\";\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport TakeSurvey from \"./TakeSurvey\";\nimport {useDispatch} from \"react-redux\";\nimport { surveySlice } from \"./store/surveySlice\";\nimport ConfirmSurvey from \"./ConfirmSurvey\";\nfunction RedirectWithCallFirst(props) {\n  props.callfirst();\n  \n  return (\n    <>\n      <h1>Redirecting...</h1>\n      {props.callRedirect}\n    </>\n  );\n}\nfunction App() {\n  const dispatch = useDispatch();\n   const latestSurveyId = useSelector(state => state.nextSurveyId)\n   \n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"survey-option-container\">\n          <Link to=\"/\">\n            <img src={logo} className=\"logo\" alt=\"logo\" />\n          </Link>\n\n          <Switch>\n          <Route path=\"/create/:surveyId\">\n             \n              <CreateSurvey />\n            </Route>\n            <Route path=\"/create\">\n              <Redirect to={`/create/${latestSurveyId}`} />\n              \n            </Route>\n            \n            <Route path=\"/take\">\n              <TakeSurvey />\n            </Route>\n            <Route path=\"/confirm/:surveyId\">\n              <ConfirmSurvey />\n            </Route>\n\n            <Route exact path=\"/\">\n              <Link to=\"/create\">\n                <Button size=\"lg\" className=\"survey-btn\">\n                  Create Survey\n                </Button>\n              </Link>\n              <Link to=\"/take\">\n                <Button size=\"lg\" className=\"survey-btn\">\n                  Take Survey\n                </Button>\n              </Link>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {store} from \"./store/store\";\nimport {Provider} from \"react-redux\";\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store} >\n    <App />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}